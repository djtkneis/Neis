<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Converters.xaml" />
    </ResourceDictionary.MergedDictionaries>
    
    <!-- TODO:  Workout a good color scheme / theme -->
    
    <!-- Brushes -->
    <SolidColorBrush x:Key="BrushButtonBorder" Color="{DynamicResource {x:Static SystemColors.ActiveBorderColorKey}}" Opacity="1" />
    <SolidColorBrush x:Key="BrushHover" Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}" Opacity="0.5" />
    <SolidColorBrush x:Key="BrushMouseDown" Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}" Opacity="0.6" />
    <SolidColorBrush x:Key="TransparentColor" Color="Transparent" Opacity="1" />

    
    <!-- Images -->
    <Image x:Key="ImageCopyToClipboard" Source="/Neis.ProductKeyManager;component/Resources/images/copy_to_clipboard.png" />
    <Image x:Key="ImageEdit" Source="/Neis.ProductKeyManager;component/Resources/images/edit.png" />
    <Image x:Key="ImageDelete" Source="/Neis.ProductKeyManager;component/Resources/images/delete.png" />
    
    
    <!-- Button -->
    <Style TargetType="Button">
        <Setter Property="Margin" Value="5" />
    </Style>
    <Style TargetType="Button" 
           x:Key="ImageButton"
           BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Width" Value="25" />
        <Setter Property="Height" Value="25" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Border x:Name="ButtonBorder"
                                CornerRadius="5"
                                BorderThickness="2">
                            <ContentPresenter Content="{TemplateBinding Button.Content}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter Property="Background" TargetName="ButtonBorder" Value="{StaticResource BrushMouseDown}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" 
           x:Key="ClipboardCopyButton"
           BasedOn="{StaticResource ImageButton}">
        <Setter Property="Content" Value="{DynamicResource ImageCopyToClipboard}" />
    </Style>
    <Style TargetType="Button" 
           x:Key="EditButton"
           BasedOn="{StaticResource ImageButton}">
        <Setter Property="Content" Value="{DynamicResource ImageEdit}" />
    </Style>
    <Style TargetType="Button" 
           x:Key="DeleteButton"
           BasedOn="{StaticResource ImageButton}">
        <Setter Property="Content" Value="{DynamicResource ImageDelete}" />
    </Style>

    <!-- Expander -->
    <Style TargetType="Expander">
        <Setter Property="Margin" Value="5" />
    </Style>
    
    
    <!-- Grid -->
    <Style TargetType="Grid"
           x:Key="GridHoverHighlight">
        <Style.Triggers>
            <Trigger Property="Grid.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BrushHover}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Grid"
           x:Key="GridProducts"
           BasedOn="{StaticResource GridHoverHighlight}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>

    
    <!-- TextBlock -->
    <Style TargetType="TextBlock">
        <Setter Property="Margin" Value="5" />
        <Setter Property="FontSize" Value="12px" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
    </Style>
    <Style TargetType="TextBlock" 
           x:Key="ExpanderHeaderTextBlock"
           BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="20px" />
        <Setter Property="Text" Value="{Binding Name, Converter={StaticResource TrimTextConverter}}" />
    </Style>
    <Style TargetType="TextBlock" 
           x:Key="KeyTextBlock"
           BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontFamily" Value="Lucida Console" />
        <Setter Property="FontSize" Value="16px" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Text" Value="{Binding Value, Converter={StaticResource TrimTextConverter}}" />
    </Style>
    <Style TargetType="TextBlock"
           x:Key="KeyCountTextBlock"
           BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Text" Value="{Binding Keys.Count, StringFormat='({0} keys)'}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Keys.Count}" Value="1" >
                <Setter Property="Text" Value="{Binding Keys.Count, StringFormat='({0} key)'}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    
    <!-- TextBox -->
    <Style TargetType="TextBox">
        <Setter Property="Margin" Value="5" />
        <Setter Property="FontSize" Value="12px" />
    </Style>

</ResourceDictionary>